//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Sce.PlayStation4
{
    namespace Input
    {
        public unsafe partial class GamePad : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 1)]
            public struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Input7GamePadC2ERKS0_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Input7GamePad10InitializeEv")]
                internal static extern void Initialize_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Input7GamePad9TerminateEv")]
                internal static extern void Terminate_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Input7GamePad6UpdateEf")]
                internal static extern void Update_0(float elapsedSeconds);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Input7GamePad8GetStateEi")]
                internal static extern global::System.IntPtr GetState_0(int playerIndex);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("scePlayStation4.prx", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5Input7GamePad8SetColorEihhh")]
                internal static extern void SetColor_0(int playerIndex, byte r, byte g, byte b);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal GamePad(GamePad.Internal* native)
                : this(new global::System.IntPtr(native))
            {
            }

            internal GamePad(GamePad.Internal native)
                : this(&native)
            {
            }

            public GamePad(global::System.IntPtr native)
            {
                __Instance = native;
            }

            public GamePad()
            {
                __Instance = Marshal.AllocHGlobal(1);
            }

            ~GamePad()
            {
                Dispose(false);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
                GC.SuppressFinalize(this);
            }

            protected virtual void Dispose(bool disposing)
            {
                Marshal.FreeHGlobal(__Instance);
            }

            public static void Initialize()
            {
                Internal.Initialize_0();
            }

            public static void Terminate()
            {
                Internal.Terminate_0();
            }

            public static void Update(float elapsedSeconds)
            {
                Internal.Update_0(elapsedSeconds);
            }

            public static Input.GamePadState GetState(int playerIndex)
            {
                var __ret = Internal.GetState_0(playerIndex);
                if (__ret == global::System.IntPtr.Zero) return new Input.GamePadState();
                return new Input.GamePadState(__ret);
            }

            public static void SetColor(int playerIndex, byte r, byte g, byte b)
            {
                var arg1 = r;
                var arg2 = g;
                var arg3 = b;
                Internal.SetColor_0(playerIndex, arg1, arg2, arg3);
            }
        }
    }
}
